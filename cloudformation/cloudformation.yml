---
AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Service
Parameters:
  Env:
    Type: String
    Description: Env
    Default: ci
  EnvId:
    Type: String
    Description: Env ID
    Default: develop
  ServiceName:
    Type: String
    Description: Service Name
    Default: micro-data-authz
  ShortName:
    Type: String
    Description: Short Name
    Default: micro-data-authz
  Platform:
    Type: String
    Description: Platform
    Default: cardata
  Version:
    Type: String
    Description: Version
    Default: latest
  CpuScalePercentage:
    Type: String
    Default: "80"
  Cpu:
    Type: String
    Default: "512"
  Memory:
    Type: String
    Default: "2048"
  LogsDestination:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Event Log Destination
    Default: "/LogsDestination"
  LogRetentionInDays:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: LogRetentionInDays
    Default: "/LogRetentionInDays"
  ServiceMinCount:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: ServiceMinCount
    Default: "/ServiceMinCount"
  ServiceMaxCount:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: ServiceMaxCount
    Default: "/ServiceMaxCount"
  MinimumHealthyPercent:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: MinimumHealthyPercent
    Default: "/MinimumHealthyPercent"
  MaximumPercent:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: MaximumPercent
    Default: "/MaximumPercent"

Conditions:
  tamasDev: !Equals [ !Ref AWS::AccountId, "123456789123"]
  tamasUat: !Equals [ !Ref AWS::AccountId, "123456789123"]

Resources:
  #######
  #
  # Service Specific Start
  #
  #######

  ServicePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "ServiceSpecificPolicy"
      Roles:
        - !Ref TaskRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: dynamodb
            Effect: Allow
            Action:
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
              - "dynamodb:Query"
              - "dynamodb:UpdateItem"
              - "dynamodb:BatchWriteItem"
              - "dynamodb:BatchGetItem"
              - "dynamodb:DescribeTable"
              - "sqs:ReceiveMessage"
            Resource: "*"

  #######
  #
  # Service Specific End
  #
  #######

  ServiceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Join ["/", ["/aws/ecs", !Ref "AWS::StackName" ]]
      RetentionInDays: !Ref LogRetentionInDays
  ERRORMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ServiceLogGroup
      FilterPattern: "[timestamp, AppName, ClusterName, TraceId, SpanId, thread, level = ERROR, logger, message]"
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: !Ref ServiceLogGroup
          MetricName: "ERROR"
  WARNMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ServiceLogGroup
      FilterPattern: "[timestamp, AppName, ClusterName, TraceId, SpanId, thread, level = WARN, logger, message]"
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: !Ref ServiceLogGroup
          MetricName: "WARN"

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: spring-cloud
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:Describe*
                  - cloudformation:Describe*
                  - cloudformation:List*
                  - ssm:Get*
                  - ssm:List*
                Resource: '*'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref AWS::StackName
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      TaskRoleArn: !Ref TaskRole
      ExecutionRoleArn: arn:aws:iam::481543810001:role/cardata-micro-data-authz--CodePipelineCodeBuildRole-VUtzZFnG0Gzz
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Cpu: !Ref Cpu
          Essential: 'true'
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Platform}-${ServiceName}:${Version}
          Memory: !Ref Memory
          PortMappings:
            - ContainerPort: 50051
            - ContainerPort: 8443
          Environment:
            - Name: VERSION
              Value: !Ref Version
            - Name: SPICEDB_DATASTORE_CONN_URI
              Value: postgres://postgres:password@db-postgres.cluster-cbuvgyauszmh.us-east-1.rds.amazonaws.com:5432/spicedb?sslmode=disable
            - Name: SPICEDB_DATASTORE_ENGINE
              Value: postgres
            - Name: SPICEDB_GRPC_PRESHARED_KEY
              Value: test
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ["/", ["/aws/ecs", !Ref "AWS::StackName" ]]
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: instance
          # HealthCheck:
          #   Command: [ "CMD-SHELL", "curl -f http://localhost:82/actuator/health || exit 1" ]
          #   Interval: 30
          #   Retries: 3
          #   StartPeriod: 60
          #   Timeout: 5
      Volumes: []

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: develop
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 80
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - sg-0cb9d5d901777ccbd
          Subnets: 
            - !ImportValue PrivateSubnetId
      CapacityProviderStrategy:
        !If
        - tamasUat
        -
          - CapacityProvider: FARGATE
            Weight: 1
          - CapacityProvider: FARGATE_SPOT
            Weight: 1
        - !If
          - tamasDev
          -
            - CapacityProvider: FARGATE
              Weight: 1
            - CapacityProvider: FARGATE_SPOT
              Weight: 5
          -
            - CapacityProvider: FARGATE
              Weight: 1

  ScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "application-autoscaling:*"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
                  - "ecs:DescribeServices"
                  - "ecs:UpdateService"
                Resource: "*"

  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref ServiceMaxCount
      MinCapacity: !Ref ServiceMinCount
      ResourceId: !Join
        - "/"
        - - service
          - develop
          - !GetAtt Service.Name
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  ScaleUp:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ParserPolicyUp
      PolicyType: StepScaling
      ScalingTargetId: !Ref "ScalableTarget"
      StepScalingPolicyConfiguration:
        Cooldown: 60
        MetricAggregationType: "Average"
        AdjustmentType: "ChangeInCapacity"
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 100
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 100
            ScalingAdjustment: 2
  ScaleDown:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ParserPolicyDown
      PolicyType: StepScaling
      ScalingTargetId: !Ref "ScalableTarget"
      StepScalingPolicyConfiguration:
        Cooldown: 60
        MetricAggregationType: "Average"
        AdjustmentType: "ChangeInCapacity"
        StepAdjustments:
          - MetricIntervalUpperBound: -1
            MetricIntervalLowerBound: -100
            ScalingAdjustment: -1
          - MetricIntervalUpperBound: -100
            ScalingAdjustment: -2

Outputs:
  Version:
    Description: Version control
    Value: !Ref Version
